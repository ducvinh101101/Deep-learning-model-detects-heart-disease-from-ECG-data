//监听未捕获异常
globalThis.addEventListener("unhandledrejection", noHandleError);
if (globalThis.parent) {
  globalThis.parent.postMessage({ type: "pdf-ready" }, "*");
  setTimeout(() => {
    globalThis.parent.postMessage({ type: "pdf-loaded" }, "*");
  }, 3000);
}
let pdfBuffer;
globalThis.addEventListener("message", function (event) {
  if (event.data && event.data.type != "pdf-local-file") return;
  setTimeout(() => {
    if (event.data.blob?.type != "application/pdf") {
      handlePDFErrorMessage(
        "Missing PDF",
        window.i18nFormat("pdf.notPermissionAccessUrl"),
      );
      return;
    }
    event.data.blob.arrayBuffer().then(function (buf) {
      const application = globalThis.PDFViewerApplication;
      if ((application && application.open)) {
        return openPdf(application, buf, event.data.fileName);
      } else {
        pdfBuffer = buf;
      }
    });
  }, 1500);
});
enableTitleMutationObserver();
let times = 0;
async function openPdf(application, buf, fileName) {
  try {
    if (!buf?.byteLength) return;
    times++;
    if (times > 50) return;
    application.open({ data: buf, url: fileName }).then(function () {
      globalThis.parent.postMessage({ type: "pdf-loaded" }, "*");
    });
    window.initPdf?.();
  } catch (error) {
    console.error(error);
    setTimeout(() => {
      openPdf(application, buf, fileName);
    }, 500);
  }
}

function noHandleError(event) {
  const message = typeof event.reason == "object"
    ? event.reason.message
    : event.reason;
  handlePDFErrorMessage(message);
}
//会被pdf.js手动调用
function handlePDFErrorMessage(message, title) {
  if (message.indexOf("Missing PDF") >= 0) {
    const ele = document.createElement("div");
    ele.innerHTML = `
    <div style="background:white;width:100vw;height: calc(100vh - 32px);display: flex;flex-direction: column;justify-content: center;align-items: center;font-size: 18px;">
      <div style="font-weight: bold;font-size: 20px;">${
      title || window.i18nFormat("pdf.noPermission")
    }</div>
      <div style="display: flex;flex-direction: row;margin-top: 12px;">
          <span style="">${window.i18nFormat("pdf.clickTopRight")}</span>
          <span style="">"${window.i18nFormat("newFile")}"</span>
      </div>
      <div>${window.i18nFormat("pdf.clickOrDropFile")}</div>
    </div>
    `;
    const viewer = document.querySelector("#viewer");
    if (!viewer) return;
    viewer.appendChild(ele);
  }
}

const DownloadTypeEnum = {
  dual: "dual",
  translated: "translated",
};
let downloadType = DownloadTypeEnum.dual;
let startDownload, cancelDialog;
init();
let hasInited = false;
function init() {
  setTimeout(() => {
    const containers = document.getElementById("editorModeButtons");
    const downloadManager = globalThis?.PDFViewerApplication?.downloadManager;
    if (!downloadManager || !containers) {
      init();
      return;
    }

    if (hasInited) return;
    //检查pdfBuf
    if (pdfBuffer) {
      globalThis.PDFViewerApplication.open(pdfBuffer).then(function () {
        globalThis.parent.postMessage({ type: "pdf-loaded" }, "*");
      });
    }

    hasInited = true;
  }, 1000);
}

function closeModal() {
  const dialog = document.getElementById("immersive-modal");
  if (!dialog) return;
  dialog.style.display = "none";
  hiddenProgress();
}

function isSafari() {
  const userAgentString = navigator.userAgent;
  // Detect Chrome
  const chromeAgent = userAgentString.indexOf("Chrome") > -1;
  // Detect Safari
  let safariAgent = userAgentString.indexOf("Safari") > -1;
  // Discard Safari since it also matches Chrome
  if (chromeAgent && safariAgent) safariAgent = false;
  return safariAgent;
}

function isChrome() {
  const userAgentString = navigator.userAgent;
  // Detect Chrome
  const chromeAgent = userAgentString.indexOf("Chrome") > -1;
  return chromeAgent;
}

function enableTitleMutationObserver() {
  const titleElement = document.querySelector("title");
  let titleMutationObserver;
  if (titleElement) {
    titleMutationObserver = new MutationObserver(function (mutations) {
      if (mutations.length > 0) {
        const title = mutations[0].target.text;
        if (globalThis.parent) {
          globalThis.parent.postMessage({ type: "update-title", title }, "*");
        }
      }
    });

    titleMutationObserver.observe(titleElement, {
      subtree: true,
      characterData: true,
      childList: true,
    });
  }
}
